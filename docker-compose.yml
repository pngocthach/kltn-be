services:
  # Nginx load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443" # Added HTTPS port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro # Mount SSL certificates
      - ./nginx/logs:/var/log/nginx # Mount logs directory
    depends_on:
      - web
      - server1
      - server2
    networks:
      - app-network
    restart: always

  # Web frontend
  web:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: web
    env_file:
      - ./packages/web/.env.production
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Server instance 1
  server1:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: server
    env_file:
      - ./packages/server/.env.production
    networks:
      - app-network
    restart: always
    depends_on:
      - mongodb
      - rabbitmq
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Server instance 2
  server2:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: server
    env_file:
      - ./packages/server/.env.production
    networks:
      - app-network
    restart: always
    depends_on:
      - mongodb
      - rabbitmq
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB database
  mongodb:
    image: mongo:latest
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: username
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: kltn
    ports:
      - "27017:27017"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
  rabbitmq_data:
